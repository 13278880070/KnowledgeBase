```java

import java.util.Optional;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * @author wangfy
 * @Description 单线程线程池
 * @date 2018/12/14
 **/
public class SerialExecutor implements Executor {
    private BlockingQueue<Runnable> runnableQueue = new LinkedBlockingDeque<>();
    private boolean flag = true;
    private Worker worker = new Worker();
    private boolean shutDown = false;
    private AtomicInteger nullRunnableCounter = new AtomicInteger();
    private Logger logger = Logger.getLogger("自定义线程池");


    @Override
    public void execute(Runnable command) {
        Optional.ofNullable(command).ifPresentOrElse(runnable -> {
            if (flag) {
                worker.setRealTask(runnable);
                flag = false;
                worker.thread.start();
            } else {
                runnableQueue.offer(command);
            }
        }, () -> logger.log(Level.WARNING, "有" + nullRunnableCounter.incrementAndGet() + "个空任务被提交到线程池"));


    }

    /**
     * @return void
     * @date 2018/12/16 16:17
     * @Description 线程执行方法
     * @Param [worker]
     **/
    private void runWorker(Worker worker) {
        Runnable task = worker.realTask;
        worker.realTask = null;
        while (task != null || (task = getTask()) != null) {
            try {
                task.run();
            } finally {
                task = null;
            }
        }
    }

    private Runnable getTask() {
        for (; isWork(); ) {
            try {
                return runnableQueue.take();
            } catch (InterruptedException e) {
                logger.log(Level.WARNING, "任务队列被中断,终止线程执行");
            }
        }
        return null;
    }

    private class Worker implements Runnable {
        Runnable realTask;
        Thread thread = new Thread(this, "线程池");


        public Worker() {
        }

        public void setRealTask(Runnable realTask) {
            this.realTask = realTask;
        }

        public void selfInterrupt() {
            Thread t = thread;
            t.interrupt();
        }

        @Override
        public void run() {
            runWorker(this);
        }

    }

    public boolean isWork() {
        return shutDown == false;
    }


    public void shutDown() {
        worker.selfInterrupt();
        shutDown = true;
    }

}

```